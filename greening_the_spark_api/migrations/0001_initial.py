# Generated by Django 4.1.1 on 2022-11-18 15:19

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Info_Panel_Questions',
            fields=[
                ('question_id', models.AutoField(primary_key=True, serialize=False)),
                ('question', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Simulation_Report',
            fields=[
                ('game_id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('date', models.DateField()),
                ('time', models.TimeField()),
                ('difficulty', models.CharField(choices=[('easy', 'easy'), ('moderate', 'moderate'), ('hard', 'hard')], max_length=8)),
                ('demand', models.IntegerField()),
                ('wind', models.IntegerField()),
                ('solar', models.IntegerField()),
                ('fossil_fuels', models.IntegerField()),
                ('nuclear', models.IntegerField()),
                ('fossil_fuels_utilisation_percentage', models.IntegerField(validators=[django.core.validators.MinValueValidator(0, message='value has to be above 0'), django.core.validators.MaxValueValidator(100, message='value has to be below 100.')])),
                ('nuclear_fuels_utilisation_percentage', models.IntegerField(validators=[django.core.validators.MinValueValidator(0, message='value has to be above 0'), django.core.validators.MaxValueValidator(100, message='value has to be below 100.')])),
                ('surplus', models.IntegerField()),
                ('shortfall', models.IntegerField()),
                ('initial_stored', models.IntegerField()),
                ('final_stored', models.IntegerField()),
                ('storage_discrepancy', models.IntegerField()),
                ('efficiency_score', models.IntegerField()),
                ('total_CO2_tonnes', models.IntegerField()),
                ('total_cost_million_pounds', models.IntegerField()),
                ('average_CO2_tonnes_per_gwh', models.IntegerField()),
                ('average_cost_million_pounds_per_gwh', models.IntegerField()),
                ('average_CO2_score', models.IntegerField(default=0)),
                ('average_cost_score', models.IntegerField(default=0)),
                ('surplus_comment', models.CharField(max_length=15)),
                ('shortfall_comment', models.CharField(max_length=15)),
                ('storage_discrepancy_comment', models.CharField(max_length=15)),
                ('efficiency_score_comment', models.CharField(max_length=15)),
                ('average_CO2_comment', models.CharField(max_length=15)),
                ('average_cost_comment', models.CharField(max_length=15)),
                ('efficiency_spark', models.CharField(choices=[('green', 'green'), ('blue', 'blue'), ('red', 'red')], max_length=5)),
                ('economy_spark', models.CharField(choices=[('green', 'green'), ('blue', 'blue'), ('red', 'red')], max_length=5)),
                ('eco_friendliness_spark', models.CharField(choices=[('green', 'green'), ('blue', 'blue'), ('red', 'red')], max_length=5)),
                ('wind_power_data_values', models.CharField(max_length=150)),
                ('solar_power_data_values', models.CharField(max_length=150)),
                ('demand_power_data_values', models.CharField(max_length=150)),
                ('fossil_fuels_power_data_values', models.CharField(max_length=150)),
                ('nuclear_power_data_values', models.CharField(max_length=150)),
                ('batteries_power_data_values', models.CharField(max_length=150)),
                ('hydro_power_data_values', models.CharField(max_length=150)),
                ('grid_surplus_data_values', models.CharField(max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='Info_Panel_Answers',
            fields=[
                ('answer_id', models.AutoField(primary_key=True, serialize=False)),
                ('the_simple_answer', models.CharField(max_length=255)),
                ('the_gts_answer', models.CharField(max_length=255)),
                ('the_complex_answer', models.CharField(max_length=255)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='greening_the_spark_api.info_panel_questions')),
            ],
        ),
    ]
